(()=>{"use strict";var e={299:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(15),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,".main{min-height:calc(100vh - 49.6px)}.nodec:hover{text-decoration:none}a:hover h5:hover{background-color:#378061;border-radius:10px;padding:3px 0;text-decoration:none}.strikethrough{text-decoration:line-through;text-shadow:0 0 8px #444}","",{version:3,sources:["webpack://./src/stylesheet.scss"],names:[],mappings:"AAEA,MACE,+BAAA,CAGF,aACE,oBAAA,CAGF,iBACE,wBAAA,CAGA,kBAAA,CACA,aAAA,CACA,oBAAA,CAGF,eACE,4BAAA,CACA,wBAAA",sourcesContent:['// @import "bootstrap";\n\n.main {\n  min-height: calc(100vh - 49.6px);\n}\n\n.nodec:hover {\n  text-decoration: none;\n}\n\na:hover h5:hover {\n  background-color: rgb(55, 128, 97);\n\n  /* cursor: pointer; */\n  border-radius: 10px;\n  padding: 3px 0;\n  text-decoration: none;\n}\n\n.strikethrough {\n  text-decoration: line-through;\n  text-shadow: 0 0 8px #444;\n}\n'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var o,r,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(o=n.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){s=!0,r=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return i}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),d=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},o=[],r=0;r<e.length;r++){var s=e[r],l=t.base?s[0]+t.base:s[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var u=a(d),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(m)):i.push({identifier:d,updater:f(m,t),references:1}),o.push(d)}return o}function l(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var a=r(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function m(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,h=0;function f(e,t){var n,o,r;if(t.singleton){var i=h++;n=p||(p=l(t)),o=u.bind(null,n,i,!1),r=u.bind(null,n,i,!0)}else n=l(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=a(n[o]);i[r].references--}for(var l=s(e,t),c=0;c<n.length;c++){var d=a(n[c]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}n=l}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={};n.r(e),n.d(e,{dateedit:()=>B,descriptionedit:()=>T,dom:()=>D,listoflist1:()=>C,readRadios1edit:()=>w,taskedit:()=>M});var t=n(379),o=n.n(t),r=n(299);o()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const i=document.querySelector("#list-display"),a=document.querySelector("#edit-form-display"),s=document.querySelector("#defaultlist"),l=document.querySelector("#form-display"),c=document.getElementById("list"),d=document.querySelectorAll(".radiobtn"),u=document.querySelector("#task"),m=document.querySelector("#description"),p=document.querySelector("#date"),h=()=>{let e=[];return localStorage.getItem("liststore")&&(e=JSON.parse(localStorage.liststore)),e},f=(e,t,n)=>{n[e].todos.splice(t,1),localStorage.setItem("liststore",JSON.stringify(n)),window.location.reload()},g=(e,t,n)=>{e[t].todos[n].status=!1,localStorage.setItem("liststore",JSON.stringify(e))},v=(e,t,n)=>{e[t].todos[n].status=!0,localStorage.setItem("liststore",JSON.stringify(e))},b=document.querySelector("#form-btn"),y=document.querySelector("#form-display"),S=document.querySelector("#task-btn"),E=document.querySelector("#list-display"),A=document.querySelector("#refresh-btn"),C=document.querySelectorAll(".listoflist"),k=document.getElementById("currentclassname"),L=document.getElementById("defaultlist"),I=document.getElementById("tommorrowlist"),x=document.getElementById("todaylist"),w=document.querySelectorAll(".radiobtnedit"),M=document.getElementById("taskedit"),T=document.getElementById("descriptionedit"),B=document.getElementById("dateedit"),O=document.getElementById("canceledittask"),H=document.getElementById("cancellist"),j=document.getElementById("editingform"),q=document.getElementById("cancelcreatetask"),N=document.getElementById("form-display"),D=()=>{H.addEventListener("click",(()=>{E.classList.add("d-none")})),O.addEventListener("click",(()=>{j.classList.add("d-none")})),q.addEventListener("click",(()=>{N.classList.add("d-none")})),b.addEventListener("click",(()=>{localStorage.getItem("selectedlist")?y.classList.contains("d-none")?y.classList.remove("d-none"):y.classList.add("d-none"):$("#myModal").modal("show")})),S.addEventListener("click",(()=>{E.classList.contains("d-none")?E.classList.remove("d-none"):E.classList.add("d-none")})),A.addEventListener("click",(()=>{if(localStorage.getItem("selectedlist"))for(localStorage.removeItem("selectedlist"),localStorage.removeItem("selectedtask");k.lastElementChild;)k.removeChild(k.lastChild)}));const e=e=>{let t=e.target.previousSibling.id;t=t.slice(-1);const n=h();if(n.splice(t,1),localStorage.setItem("liststore",JSON.stringify(n)),e.target.parentElement.remove(),localStorage.getItem("selectedlist")===e.target.previousSibling.innerHTML.trim())for(localStorage.removeItem("selectedlist");k.lastElementChild;)k.removeChild(k.lastChild)},t=e=>{const t=h(),n=localStorage.getItem("selectedlist");for(let o=0;o<t.length;o+=1)if(t[o].list===n){let n=e.target.parentElement.parentElement.id;n=n.slice(-1),f(o,n,t);break}e.target.parentElement.parentElement.remove()},n=e=>{if(j.classList.contains("d-none")){const t=e.target.parentElement.parentElement.id.slice(-1);localStorage.setItem("selectedtask",t),j.classList.remove("d-none");for(let t=0;t<3;t+=1)if(w[t].value===e.target.parentElement.previousSibling.innerHTML){w[t].checked=!0;break}M.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.previousSibling.innerHTML,T.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.innerHTML,B.value=e.target.parentElement.previousSibling.previousSibling.innerHTML}else j.classList.add("d-none"),localStorage.removeItem("selectedtask")},o=e=>{const t=h(),n=e.target.parentElement.parentElement,o=n.id.slice(-1),r=localStorage.getItem("selectedlist");if(e.target.checked){n.classList.add("strikethrough");for(let e=0;e<t.length;e+=1)if(t[e].list===r){v(t,e,o);break}}else{n.classList.remove("strikethrough");for(let e=0;e<t.length;e+=1)if(t[e].list===r){g(t,e,o);break}}},r=(e,r,i,a,s=1)=>{const l=document.createElement("tr");l.setAttribute("id",`task${i}`),l.setAttribute("class","text-center");const c=e[r].todos[i],d=document.createElement("th");if(1===s){l.appendChild(d);const e=document.createElement("input");e.addEventListener("click",o),d.appendChild(e),e.setAttribute("scope","row"),e.setAttribute("type","checkbox"),e.setAttribute("class","form-check-input taskdone"),c.status&&(e.checked=!0)}const u=document.createElement("td");l.appendChild(u),u.innerHTML=c.task;const m=document.createElement("td");l.appendChild(m),m.innerHTML=c.description;const p=document.createElement("td");l.appendChild(p),p.innerHTML=c.date;const h=document.createElement("td");if(h.innerHTML=c.priority,l.appendChild(h),1===s){const e=document.createElement("td");l.appendChild(e);const o=document.createElement("button");o.addEventListener("click",n),e.appendChild(o),o.setAttribute("class","btn btn-primary edittask"),o.innerHTML="Edit";const r=document.createElement("td");l.appendChild(r);const i=document.createElement("button");i.addEventListener("click",t),r.appendChild(i),i.setAttribute("class","btn btn-danger deltask"),i.innerHTML="Delete",c.status&&l.classList.add("strikethrough")}a.appendChild(l)},i=()=>{if(localStorage.getItem("selectedlist")){for(;k.lastElementChild;)k.removeChild(k.lastChild);const e=document.createElement("h4");k.appendChild(e),e.setAttribute("class","text-center text-dark mb-4"),e.innerHTML=localStorage.selectedlist,(e=>{b.classList.remove("d-none");const t=h(),n=document.createElement("table");k.appendChild(n),n.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead"),i=document.createElement("tr");o.setAttribute("class","text-center"),i.innerHTML='  <th scope="column">Status</th>\n                    <th>Task</th>\n                    <th>Description</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n                    <th>Update</th>\n                    <th>Remove</th>',o.appendChild(i),n.appendChild(o);const a=document.createElement("tbody");n.appendChild(a);for(let n=0;n<t.length;n+=1)if(t[n].list===e)for(let e=0;e<t[n].todos.length;e+=1)r(t,n,e,a)})(localStorage.getItem("selectedlist"))}},a=e=>{const t=e.target.textContent.trim();localStorage.setItem("selectedlist",t),i()},s=e=>{for(b.classList.add("d-none");k.lastElementChild;)k.removeChild(k.lastChild);const t=document.createElement("h4");k.appendChild(t),t.setAttribute("class","text-center text-dark mb-4"),t.innerHTML=e.target.textContent.trim(),localStorage.removeItem("selectedlist"),(e=>{const t=h(),n=document.createElement("table");k.appendChild(n),n.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead");n.appendChild(o);const i=document.createElement("tr");o.setAttribute("class","text-center"),o.appendChild(i),i.innerHTML='  <th scope="column">Task</th>\n    <th scope="column">Description</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n            ';const a=document.createElement("tbody");n.appendChild(a);for(let n=0;n<t.length;n+=1)for(let o=0;o<t[n].todos.length;o+=1){const i=t[n].todos[o].date,{status:s}=t[n].todos[o],l=new Date(i),c=(new Date-l)/864e5;("Tomorrow - [View-Only]"===e&&c<0&&c>-1.1&&!1===s||"Today - [View-Only]"===e&&c>=0&&c<=1&&!1===s)&&r(t,n,o,a,e)}})(e.target.textContent.trim())};L.addEventListener("click",a),x.addEventListener("click",s),I.addEventListener("click",s),i(),(()=>{if(localStorage.getItem("liststore")){const t=JSON.parse(localStorage.liststore),n=document.querySelector("#listoftodos");for(let o=1;o<t.length;o+=1){const r=document.createElement("a");r.setAttribute("href","#"),r.setAttribute("class","d-flex my-2 justify-content-center nodec");const i=document.createElement("h5");r.appendChild(i),i.addEventListener("click",a),i.setAttribute("id",`projectlist${o}`),i.setAttribute("class","text-white p-2 w-50 text-center listoflist"),i.innerHTML=`\n                     ${t[o].list} \n                  \n                    `;const s=document.createElement("button");s.addEventListener("click",e),r.appendChild(s),s.setAttribute("class","btn btn-danger  btn-sm"),s.innerHTML="Delete",n.appendChild(r)}}})()};D(),(e=>{class t{constructor(e){this.list=e,this.todos=[]}}function n(e,t,n,o,r){this.date=e,this.task=t,this.description=n,this.priority=o,this.status=r}const o=[];if(!localStorage.getItem("liststore")){const e=new t(s.textContent);o.push(e),localStorage.setItem("liststore",JSON.stringify(o))}i.addEventListener("submit",(e=>{const n=h(),o=new t(c.value);n.push(o),localStorage.setItem("liststore",JSON.stringify(n)),e.preventDefault(),window.location.reload()})),l.addEventListener("submit",(e=>{const t=h();if(localStorage.getItem("selectedlist")){let o;for(let e=0;e<3;e+=1)if(!0===d[e].checked){o=d[e].value;break}const r=new n(p.value,u.value,m.value,o,!1);for(let e=0;e<t.length;e+=1){const n=localStorage.getItem("selectedlist");if(t[e].list===n){t[e].todos.push(r),localStorage.setItem("liststore",JSON.stringify(t));break}}e.preventDefault(),window.location.reload()}})),a.addEventListener("submit",(t=>{const n=h();if(localStorage.getItem("selectedlist")){let t;for(let n=0;n<3;n+=1)if(!0===e.readRadios1edit[n].checked){t=e.readRadios1edit[n].value;break}const o=localStorage.getItem("selectedlist");for(let r=0;r<n.length;r+=1)if(n[r].list===o){const o=localStorage.getItem("selectedtask");n[r].todos[o].task=e.taskedit.value,n[r].todos[o].date=e.dateedit.value,n[r].todos[o].description=e.descriptionedit.value,n[r].todos[o].priority=t,localStorage.setItem("liststore",JSON.stringify(n));break}e.dom()}t.preventDefault(),window.location.reload()})),l.reset(),i.reset()})(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,