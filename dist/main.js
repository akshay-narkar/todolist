(()=>{"use strict";var e={747:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(15),r=n.n(o),l=n(645),a=n.n(l)()(r());a.push([e.id,".main {\n  min-height: calc(100vh - 49.6px);\n}\n\na {\n  text-decoration: none;\n}\n\n.strikethrough {\n  text-decoration: line-through;\n}\n","",{version:3,sources:["webpack://./src/stylesheet.css"],names:[],mappings:"AAAA;EACE,gCAAgC;AAClC;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,6BAA6B;AAC/B",sourcesContent:[".main {\n  min-height: calc(100vh - 49.6px);\n}\n\na {\n  text-decoration: none;\n}\n\n.strikethrough {\n  text-decoration: line-through;\n}\n"],sourceRoot:""}]);const i=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var l=0;l<this.length;l++){var a=this[l][0];null!=a&&(r[a]=!0)}for(var i=0;i<e.length;i++){var s=[].concat(e[i]);o&&r[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,l=void 0;try{for(var a,i=e[Symbol.iterator]();!(o=(a=i.next()).done)&&(n.push(a.value),!t||n.length!==t);o=!0);}catch(e){r=!0,l=e}finally{try{o||null==i.return||i.return()}finally{if(r)throw l}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=r[1],a=r[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(s," */"),d=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[l].concat(d).concat([c]).join("\n")}return[l].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),l=[];function a(e){for(var t=-1,n=0;n<l.length;n++)if(l[n].identifier===e){t=n;break}return t}function i(e,t){for(var n={},o=[],r=0;r<e.length;r++){var i=e[r],s=t.base?i[0]+t.base:i[0],c=n[s]||0,d="".concat(s," ").concat(c);n[s]=c+1;var u=a(d),m={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(l[u].references++,l[u].updater(m)):l.push({identifier:d,updater:p(m,t),references:1}),o.push(d)}return o}function s(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var l=n.nc;l&&(o.nonce=l)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var a=r(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var l=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(l,a[t]):e.appendChild(l)}}function m(e,t,n){var o=n.css,r=n.media,l=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),l&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,h=0;function p(e,t){var n,o,r;if(t.singleton){var l=h++;n=f||(f=s(t)),o=u.bind(null,n,l,!1),r=u.bind(null,n,l,!0)}else n=s(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=i(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=a(n[o]);l[r].references--}for(var s=i(e,t),c=0;c<n.length;c++){var d=a(n[c]);0===l[d].references&&(l[d].updater(),l.splice(d,1))}n=s}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var l=t[o]={id:o,exports:{}};return e[o](l,l.exports,n),l.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={};n.r(e),n.d(e,{content1:()=>u,dateedit:()=>v,defaultlisthome:()=>m,defaulttodayhome:()=>h,defaulttomhome:()=>f,dom:()=>y,formBtn:()=>l,listoflist1:()=>d,readRadios1edit:()=>p,refreshlist:()=>c,showForm:()=>a,showlist:()=>s,taskbtn:()=>i,taskedit:()=>g});var t=n(379),o=n.n(t),r=n(747);o()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const l=document.querySelector("#form-btn"),a=document.querySelector("#form-display"),i=document.querySelector("#task-btn"),s=document.querySelector("#list-display"),c=document.querySelector("#refresh-btn"),d=document.querySelectorAll(".listoflist"),u=document.getElementById("currentclassname"),m=document.getElementById("defaultlist"),f=document.getElementById("tommorrowlist"),h=document.getElementById("todaylist"),p=document.querySelectorAll(".radiobtnedit"),g=document.getElementById("taskedit"),v=document.getElementById("dateedit"),b=document.getElementById("editingform");function y(){function e(){let e=[];return localStorage.getItem("liststore")&&(e=JSON.parse(localStorage.liststore)),e}function t(t){let n=t.target.previousSibling.id;n=n.slice(-1);const o=e();if(o.splice(n,1),localStorage.setItem("liststore",JSON.stringify(o)),t.target.parentElement.remove(),localStorage.getItem("selectedlist")===t.target.previousSibling.innerHTML.trim())for(localStorage.removeItem("selectedlist");u.lastElementChild;)u.removeChild(u.lastChild)}function n(t){const n=e(),o=localStorage.getItem("selectedlist");for(let e=0;e<n.length;e+=1)if(n[e].list===o){let o=t.target.parentElement.parentElement.id;o=o.slice(-1),n[e].todos.splice(o,1),localStorage.setItem("liststore",JSON.stringify(n));break}t.target.parentElement.parentElement.remove()}function o(e){if(b.classList.contains("d-none")){const t=e.target.parentElement.parentElement.id.slice(-1);localStorage.setItem("selectedtask",t),b.classList.remove("d-none");for(let t=0;t<3;t+=1)if(p[t].value===e.target.parentElement.previousSibling.innerHTML){p[t].checked=!0;break}g.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.innerHTML,v.value=e.target.parentElement.previousSibling.previousSibling.innerHTML}else b.classList.add("d-none"),localStorage.removeItem("selectedtask")}function r(t){const n=e(),o=t.target.parentElement.parentElement,r=o.id.slice(-1),l=localStorage.getItem("selectedlist");if(t.target.checked){o.classList.add("strikethrough");for(let e=0;e<n.length;e+=1)if(n[e].list===l){n[e].todos[r].status=!0,localStorage.setItem("liststore",JSON.stringify(n));break}}else{o.classList.remove("strikethrough");for(let e=0;e<n.length;e+=1)if(n[e].list===l){n[e].todos[r].status=!1,localStorage.setItem("liststore",JSON.stringify(n));break}}}function d(e,t,l,a){const i=document.createElement("tr");i.setAttribute("id",`task${l}`),i.setAttribute("class","text-center");const s=e[t].todos[l],c=document.createElement("th");i.appendChild(c);const d=document.createElement("input");d.addEventListener("click",r),c.appendChild(d),d.setAttribute("scope","row"),d.setAttribute("type","checkbox"),d.setAttribute("class","form-check-input taskdone"),s.status&&(d.checked=!0);const u=document.createElement("td");i.appendChild(u),u.innerHTML=s.task;const m=document.createElement("td");i.appendChild(m),m.innerHTML=s.date;const f=document.createElement("td");f.innerHTML=s.priority,i.appendChild(f);const h=document.createElement("td");i.appendChild(h);const p=document.createElement("button");p.addEventListener("click",o),h.appendChild(p),p.setAttribute("class","btn btn-primary edittask"),p.innerHTML="Edit";const g=document.createElement("td");i.appendChild(g);const v=document.createElement("button");v.addEventListener("click",n),g.appendChild(v),v.setAttribute("class","btn btn-danger deltask"),v.innerHTML="Delete",a.appendChild(i)}function y(){if(localStorage.getItem("selectedlist")){for(;u.lastElementChild;)u.removeChild(u.lastChild);const t=document.createElement("h4");u.appendChild(t),t.setAttribute("class","text-center text-dark mb-4"),t.innerHTML=localStorage.selectedlist,function(t){l.classList.remove("d-none");const n=e();for(let e=0;e<n.length;e+=1)if(n[e].list===t){const t=document.createElement("table");u.appendChild(t),t.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead"),r=document.createElement("tr");o.setAttribute("class","text-center"),r.innerHTML='  <th scope="column">Status</th>\n                    <th>Task</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n                    <th>Update</th>\n                    <th>Remove</th>',o.appendChild(r),t.appendChild(o);const l=document.createElement("tbody");t.appendChild(l);for(let t=0;t<n[e].todos.length;t+=1)d(n,e,t,l)}}(localStorage.getItem("selectedlist"))}}function S(e){const t=e.target.textContent.trim();localStorage.setItem("selectedlist",t),y()}function E(t){for(l.classList.add("d-none");u.lastElementChild;)u.removeChild(u.lastChild);const n=document.createElement("h4");u.appendChild(n),n.setAttribute("class","text-center text-dark mb-4"),n.innerHTML=t.target.textContent.trim(),localStorage.removeItem("selectedlist"),function(t){const n=e();for(let e=0;e<n.length;e+=1){const o=document.createElement("table");u.appendChild(o),o.setAttribute("class","table table-stripped text-dark container pt-5");const r=document.createElement("thead"),l=document.createElement("tr");r.setAttribute("class","text-center"),l.innerHTML='  <th scope="column">Status</th>\n                    <th>Task</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n                    <th>Update</th>\n                    <th>Remove</th>',r.appendChild(l),o.appendChild(r);const a=document.createElement("tbody");o.appendChild(a);for(let o=0;o<n[e].todos.length;o+=1){const r=n[e].todos[o].date,{status:l}=n[e].todos[o],i=new Date(r),s=new Date,c=Math.round((s-i)/864e5);("Tomorrow"===t&&1===c&&!1===l||"Today"===t&&0===c&&!1===l)&&d(n,e,o,a)}}}(t.target.textContent.trim())}l.addEventListener("click",(()=>{localStorage.getItem("selectedlist")?a.classList.contains("d-none")?a.classList.remove("d-none"):a.classList.add("d-none"):alert("Please select a list to create the task")})),i.addEventListener("click",(()=>{s.classList.contains("d-none")?s.classList.remove("d-none"):s.classList.add("d-none")})),c.addEventListener("click",(()=>{if(localStorage.getItem("selectedlist"))for(localStorage.removeItem("selectedlist");u.lastElementChild;)u.removeChild(u.lastChild)})),m.addEventListener("click",S),h.addEventListener("click",E),f.addEventListener("click",E),y(),function(){if(localStorage.getItem("liststore")){const e=JSON.parse(localStorage.liststore),n=document.querySelector("#listoftodos");for(let o=1;o<e.length;o+=1){const r=document.createElement("a");r.setAttribute("href","#"),r.setAttribute("class","d-flex my-2 justify-content-center");const l=document.createElement("h5");r.appendChild(l),l.addEventListener("click",S),l.setAttribute("id",`projectlist${o}`),l.setAttribute("class","text-white p-2 w-50 text-center listoflist"),l.innerHTML=`\n                     ${e[o].list} \n                  \n                    `;const a=document.createElement("button");a.addEventListener("click",t),r.appendChild(a),a.setAttribute("class","btn btn-danger  btn-sm"),a.innerHTML="Delete",n.appendChild(r)}}}()}const S=document.querySelector("#submitlist"),E=document.querySelector("#submittask"),k=document.querySelector("#defaultlist"),C=document.getElementById("list"),A=document.querySelectorAll(".radiobtn"),L=document.querySelector("#task"),I=document.querySelector("#date"),x=document.querySelector("#edittask");y(),function(e){class t{constructor(e){this.list=e,this.todos=[]}}function n(e,t,n,o){this.date=e,this.task=t,this.priority=n,this.status=o}let o=[];if(!localStorage.getItem("liststore")){const e=new t(k.textContent);o.push(e),localStorage.setItem("liststore",JSON.stringify(o))}function r(){return localStorage.getItem("liststore")&&(o=JSON.parse(localStorage.liststore)),o}S.addEventListener("click",(()=>{const e=r(),n=new t(C.value);e.push(n),localStorage.setItem("liststore",JSON.stringify(e))})),C.value="",E.addEventListener("click",(()=>{const e=r();if(localStorage.getItem("selectedlist")){let t;for(let e=0;e<3;e+=1)if(!0===A[e].checked){t=A[e].value;break}const o=new n(I.value,L.value,t,!1);for(let t=0;t<e.length;t+=1){const n=localStorage.getItem("selectedlist");if(e[t].list===n){e[t].todos.push(o),localStorage.setItem("liststore",JSON.stringify(e));break}}}else alert("Please select a list")})),x.addEventListener("click",(()=>{const t=r();if(localStorage.getItem("selectedlist")){let n;for(let t=0;t<3;t+=1)if(!0===e.readRadios1edit[t].checked){n=e.readRadios1edit[t].value;break}const o=localStorage.getItem("selectedlist");for(let r=0;r<t.length;r+=1)if(t[r].list===o){const o=localStorage.getItem("selectedtask");t[r].todos[o].task=e.taskedit.value,t[r].todos[o].date=e.dateedit.value,t[r].todos[o].priority=n,localStorage.setItem("liststore",JSON.stringify(t));break}e.dom()}}))}(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,